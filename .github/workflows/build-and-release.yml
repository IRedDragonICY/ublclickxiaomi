name: Build and Release Executable

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

      - name: Build executable with PyInstaller
        shell: bash
        run: |
          if [ "$RUNNER_OS" = "Windows" ]; then
            # Build without console window on Windows
            pyinstaller --noconfirm --onefile --windowed --name ublclickxiaomi main.py
          else
            pyinstaller --noconfirm --onefile --name ublclickxiaomi main.py
          fi

      - name: Prepare artifact (Linux/macOS)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          mkdir -p release
          if [ "$RUNNER_OS" = "Linux" ]; then SUFFIX=linux; else SUFFIX=macos; fi
          cp dist/ublclickxiaomi "release/ublclickxiaomi-${SUFFIX}"
          chmod +x release/*

      - name: Prepare artifact (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release | Out-Null
          Copy-Item -Path "dist/ublclickxiaomi.exe" -Destination "release/ublclickxiaomi-windows.exe" -Force

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: ublclickxiaomi-${{ runner.os }}
          path: release/*
          if-no-files-found: error

  publish:
    name: Create GitHub Release and upload assets
    runs-on: ubuntu-latest
    needs: build
    if: always()
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: true

      - name: Show downloaded files
        run: |
          ls -la artifacts || true

      - name: Create/Update release and upload assets
        uses: ncipollo/release-action@v1
        with:
          tag: auto-${{ github.sha }}
          name: Auto build ${{ github.sha }}
          generateReleaseNotes: true
          allowUpdates: true
          artifacts: artifacts/*
          token: ${{ secrets.GITHUB_TOKEN }}


